{"ast":null,"code":"var _jsxFileName = \"/Users/reyhane/cmdf2025-2/cmd-f2025/front/src/components/Verification.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Verification = ({\n  onSuccess\n}) => {\n  _s();\n  const [code, setCode] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [generatedCode, setGeneratedCode] = useState(\"\");\n  useEffect(() => {\n    // 임시 인증 코드를 생성하여 저장\n    const code = Math.floor(100000 + Math.random() * 900000); // 6자리 코드\n    setGeneratedCode(code);\n    console.log(\"Generated code:\", code); // 콘솔에 생성된 코드 출력 (디버깅용)\n  }, []);\n  const handleVerification = event => {\n    event.preventDefault();\n    setLoading(true);\n    setErrorMessage(\"\");\n\n    // 인증 코드 검증 (서버 없이 프론트엔드에서만 처리)\n    if (parseInt(code) === generatedCode) {\n      onSuccess(); // 인증 성공\n    } else {\n      setErrorMessage(\"Invalid verification code. Please try again.\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"verification\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center\",\n      children: \"Enter Your Verification Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleVerification,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"verificationCode\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Verification Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          placeholder: \"Enter your code\",\n          value: code,\n          onChange: e => setCode(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        className: \"mt-3 w-100\",\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Verifying...\" : \"Verify Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Verification, \"SQwGWrp5Ftb3D3Lsc5RLSaXBzRE=\");\n_c = Verification;\nexport default Verification;\nvar _c;\n$RefreshReg$(_c, \"Verification\");","map":{"version":3,"names":["useState","useEffect","Button","Form","jsxDEV","_jsxDEV","Verification","onSuccess","_s","code","setCode","errorMessage","setErrorMessage","loading","setLoading","generatedCode","setGeneratedCode","Math","floor","random","console","log","handleVerification","event","preventDefault","parseInt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","required","variant","disabled","_c","$RefreshReg$"],"sources":["/Users/reyhane/cmdf2025-2/cmd-f2025/front/src/components/Verification.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nconst Verification = ({ onSuccess }) => {\n  const [code, setCode] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [generatedCode, setGeneratedCode] = useState(\"\");\n\n  useEffect(() => {\n    // 임시 인증 코드를 생성하여 저장\n    const code = Math.floor(100000 + Math.random() * 900000); // 6자리 코드\n    setGeneratedCode(code);\n    console.log(\"Generated code:\", code); // 콘솔에 생성된 코드 출력 (디버깅용)\n  }, []);\n\n  const handleVerification = (event) => {\n    event.preventDefault();\n    setLoading(true);\n    setErrorMessage(\"\");\n\n    // 인증 코드 검증 (서버 없이 프론트엔드에서만 처리)\n    if (parseInt(code) === generatedCode) {\n      onSuccess(); // 인증 성공\n    } else {\n      setErrorMessage(\"Invalid verification code. Please try again.\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"verification\">\n      <h3 className=\"text-center\">Enter Your Verification Code</h3>\n      <Form onSubmit={handleVerification}>\n        <Form.Group controlId=\"verificationCode\">\n          <Form.Label>Verification Code</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Enter your code\"\n            value={code}\n            onChange={(e) => setCode(e.target.value)}\n            required\n          />\n        </Form.Group>\n        {errorMessage && <p className=\"text-danger\">{errorMessage}</p>}\n        <Button\n          variant=\"primary\"\n          className=\"mt-3 w-100\"\n          type=\"submit\"\n          disabled={loading}\n        >\n          {loading ? \"Verifying...\" : \"Verify Code\"}\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default Verification;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}